// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PricingService.Database;

namespace PricingService.Migrations
{
    [DbContext(typeof(PricingDbContext))]
    [Migration("20210425183828_BigRefactor")]
    partial class BigRefactor
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("PricingService.Model.CustomerModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("FreeDaysId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FreeDaysId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("PricingService.Model.DayOfWeekModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Day")
                        .HasColumnType("int");

                    b.Property<int?>("ServiceDefinitionModelId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ServiceDefinitionModelId");

                    b.ToTable("Days");
                });

            modelBuilder.Entity("PricingService.Model.DiscountModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("DiscountPercent")
                        .HasColumnType("float");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Discounts");
                });

            modelBuilder.Entity("PricingService.Model.FreeDaysModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("FreeDays")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("FreeDays");
                });

            modelBuilder.Entity("PricingService.Model.ServiceDefinitionModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ServiceDefinitions");

                    b.HasDiscriminator<string>("Discriminator").HasValue("ServiceDefinitionModel");
                });

            modelBuilder.Entity("PricingService.Model.ServiceModel", b =>
                {
                    b.HasBaseType("PricingService.Model.ServiceDefinitionModel");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int?>("CustomerModelId")
                        .HasColumnType("int");

                    b.Property<int?>("DiscountId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("StartDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.HasIndex("CustomerModelId");

                    b.HasIndex("DiscountId");

                    b.HasDiscriminator().HasValue("ServiceModel");
                });

            modelBuilder.Entity("PricingService.Model.CustomerModel", b =>
                {
                    b.HasOne("PricingService.Model.FreeDaysModel", "FreeDays")
                        .WithMany()
                        .HasForeignKey("FreeDaysId");

                    b.Navigation("FreeDays");
                });

            modelBuilder.Entity("PricingService.Model.DayOfWeekModel", b =>
                {
                    b.HasOne("PricingService.Model.ServiceDefinitionModel", null)
                        .WithMany("BillingDays")
                        .HasForeignKey("ServiceDefinitionModelId");
                });

            modelBuilder.Entity("PricingService.Model.ServiceModel", b =>
                {
                    b.HasOne("PricingService.Model.CustomerModel", null)
                        .WithMany("UsedServices")
                        .HasForeignKey("CustomerModelId");

                    b.HasOne("PricingService.Model.DiscountModel", "Discount")
                        .WithMany()
                        .HasForeignKey("DiscountId");

                    b.Navigation("Discount");
                });

            modelBuilder.Entity("PricingService.Model.CustomerModel", b =>
                {
                    b.Navigation("UsedServices");
                });

            modelBuilder.Entity("PricingService.Model.ServiceDefinitionModel", b =>
                {
                    b.Navigation("BillingDays");
                });
#pragma warning restore 612, 618
        }
    }
}
